@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging;

@inject ILogger<MainFooter> Logger

@inject HubConnection HubConnection

@implements IAsyncDisposable

@footerText

@code {

    private string footerText = string.Empty;

    private string exceptionMsg = string.Empty;

    protected override void OnInitialized()
    {
        // Register callbacks for the Connection life-cycle events
        HubConnection.Closed += ClosedHandler;
        HubConnection.Reconnected += ReconnectedHandler;
        HubConnection.Reconnecting += ReconnectingHandler;

        setFooterText();

        Logger.LogInformation("Initialized ...");

        base.OnInitialized();
    }

    private Task ClosedHandler(Exception ex)
    {
        if (ex is not null)
        {
            exceptionMsg = ex.Message;
        }
        setFooterText();

        Logger.LogInformation($"Done with {nameof(ClosedHandler)}");

        return Task.CompletedTask;
    }

    private Task ReconnectedHandler(string connectionId)
    {
        exceptionMsg = string.Empty;
        setFooterText();

        Logger.LogInformation($"Done with {nameof(ReconnectedHandler)}");

        return Task.CompletedTask;
    }

    private Task ReconnectingHandler(Exception ex)
    {
        if (ex is not null)
        {
            exceptionMsg = ex.Message;
        }
        setFooterText();

        Logger.LogInformation($"Done with {nameof(ReconnectingHandler)}");

        return Task.CompletedTask;
    }

    private void setFooterText()
    {
        footerText = $"Link status: {HubConnection.State}";

        if (!string.IsNullOrWhiteSpace(exceptionMsg))
        {
            footerText += $" - error: {exceptionMsg}";
        }

        if (!string.IsNullOrWhiteSpace(HubConnection.ConnectionId))
        {
            footerText += $" - ConnectionId: {HubConnection.ConnectionId}";
        }
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (HubConnection is not null)
        {
            // Unregister callbacks for the Connection life-cycle events
            HubConnection.Closed -= ClosedHandler;
            HubConnection.Reconnected -= ReconnectedHandler;
            HubConnection.Reconnecting -= ReconnectingHandler;

            await HubConnection.DisposeAsync();
        }
    }
}
