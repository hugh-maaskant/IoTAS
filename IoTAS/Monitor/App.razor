@using System.Threading.Tasks;

@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging;

@using IoTAS.Shared.DevicesStatusStore
@using IoTAS.Shared.Hubs

@inject NavigationManager NavigationManager
@inject ILogger<App> Logger
@inject ILogger<VolatileDeviceStatusStore> StoreLogger

@implements IAsyncDisposable


<Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
    <Found Context="routeData">
        <CascadingValue Name="CascadingStatusList" Value="@_statuses">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        </CascadingValue>
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <p>Sorry, there is nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {

    private HubConnection _hubConnection;

    private IDeviceStatusStore _store;

    private IEnumerable<DeviceReportingStatus> _statuses;

    protected override void OnInitialized()
    {
        Logger.LogInformation("App initialized ...");

        _store = new VolatileDeviceStatusStore(StoreLogger);
        _statuses = _store.GetDeviceStatuses();

        var path = NavigationManager.ToAbsoluteUri(IMonitorHubServer.path);
        Logger.LogInformation($"Using MonitorHub at {path}");

        // Create and configure a HubConnection, but do not yet start it to avoid making
        // the user wait. Delay start to after the FirstRender.
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(path)
            .Build();

        // Register the IMonitorHub callback methods
        _hubConnection.On<SrvToMonDeviceHeartbeatDto>(nameof(IMonitorHub.ReceiveDeviceHeartbeatUpdate), (hearbeatDto) =>
        {
            Logger.LogInformation("ReceiveDeviceHeartbeatUpdate callback {HeartBeatDto}", hearbeatDto);
            _ = _store.UpdateHeartbeat(hearbeatDto.DeviceId, hearbeatDto.ReceivedAt);
            _statuses = _store.GetDeviceStatuses().OrderBy(status => status.DeviceId);
            StateHasChanged();
        });

        _hubConnection.On<SrvToMonDeviceStatusDto>(nameof(IMonitorHub.ReceiveDeviceStatusUpdate), (statusDto) =>
        {
            Logger.LogInformation("ReceiveDeviceStatusUpdate callback: {StatusDto}", statusDto);
            _store.SetDeviceStatus(DeviceReportingStatus.FromStatusDto(statusDto));
            _statuses = _store.GetDeviceStatuses().OrderBy(status => status.DeviceId);
            StateHasChanged();
        });

        _hubConnection.On<SrvToMonDeviceStatusDto[]>(nameof(IMonitorHub.ReceiveDeviceStatusesSnapshot), (statusListDto) =>
        {
            Logger.LogInformation("ReceiveDeviceStatusesSnapshot callback {statusListDto.Count} Devices in List", statusListDto.Count());
            foreach (var statusDto in statusListDto)
            {
                _store.SetDeviceStatus(DeviceReportingStatus.FromStatusDto(statusDto));
            }
            _statuses = _store.GetDeviceStatuses().OrderBy(status => status.DeviceId);
            StateHasChanged();
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ConnectWithRetryAsync();

            if (_hubConnection.State == HubConnectionState.Connected)
            {
                MonToSrvRegistrationDto registrationDto = new(); // currently empty --> default record returned
                await _hubConnection.SendAsync(nameof(IMonitorHubServer.RegisterMonitorClient), registrationDto);
                Logger.LogInformation(
                    nameof(OnAfterRenderAsync) + " - " +
                    "Monitor has been registered with the Server, {ConnectionId}",
                    _hubConnection.ConnectionId);
            }
        }
    }

    /// <summary>
    /// Starts the HubConnection and configures it for lifecycle event handling, including automatic reconnection
    /// </summary>
    /// <param name="connection">The HubConnection that needs to be started and configured</param>
    /// <param name="token">Cancellation token to end the Task</param>
    /// <returns>
    /// <see langword="true"/> upon succesful connection startup, <see langword="false"/> otherwise
    /// </returns>
    private async Task StartAndConfigureConnectionAsync()
    {
        await ConnectWithRetryAsync();

        if (_hubConnection.State == HubConnectionState.Connected)
        {
            _hubConnection.Closed += (e) => ConnectionClosedHandler(e);
            _hubConnection.Reconnecting += (e) => ConnectionReconnectingHandler(e);
            _hubConnection.Reconnected += (newId) => ConnectionReconnectedHandler(newId); ;
        }
        else
        {
            Logger.LogCritical("Failed to connect to Server Hub");
        }
    }

    /// <summary>
    /// (Re-)Starts the HubConnection untill succesfull
    /// </summary>
    /// <param name="connection">The HubConnection that needs to be started</param>
    /// <param name="token">Cancellation token to end the Task</param>
    /// <returns>
    /// <see langword="true"/> upon succesful connection startup, <see langword="false"/> otherwise
    /// </returns>
    private async Task ConnectWithRetryAsync()
    {
        Random random = null;
        int delayIncrease = 0;

        // Keep trying to until we can start or the browser tab is closed by the user
        while (_hubConnection.State != HubConnectionState.Connected)
        {
            try
            {
                Console.WriteLine("Trying to connect ...");
                await _hubConnection.StartAsync();
                Console.WriteLine("Connection has been established");
            }
            catch (Exception e)
            {
                random ??= new Random();
                int delay = random.Next(2500, 5000) + delayIncrease;
                if (delayIncrease <= 17500) delayIncrease += 2500;

                Console.WriteLine($"Error while connecting: {e.Message}; retrying in {delay} msec");
                await Task.Delay(delay);
            }
        }
    }

    private Task ConnectionClosedHandler(Exception e)
    {
        if (e is null)
        {
            Logger.LogWarning(
                nameof(ConnectionClosedHandler) + " - " +
                "Connection closed by Server");
            // cannot show old data
            // _store.Clear();
            // _statuses = _store.GetDeviceStatuses();
            return Task.CompletedTask;
        }
       
        Logger.LogWarning(
            e,
            nameof(ConnectionClosedHandler) + " - " +
            "Connection to Server has been lost");

        return ConnectWithRetryAsync();
    }

    private Task ConnectionReconnectedHandler(string connectionId)
    {
        Logger.LogInformation($"Done with {nameof(ConnectionReconnectedHandler)}");

        return Task.CompletedTask;
    }

    private Task ConnectionReconnectingHandler(Exception ex)
    {
        Logger.LogInformation($"Done with {nameof(ConnectionReconnectingHandler)}");

        return Task.CompletedTask;
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            _hubConnection.Remove(nameof(IMonitorHub.ReceiveDeviceHeartbeatUpdate));
            _hubConnection.Remove(nameof(IMonitorHub.ReceiveDeviceStatusUpdate));
            _hubConnection.Remove(nameof(IMonitorHub.ReceiveDeviceStatusesSnapshot));

            _hubConnection.Closed -= ConnectionClosedHandler;
            _hubConnection.Reconnected -= ConnectionReconnectedHandler;
            _hubConnection.Reconnecting -= ConnectionReconnectingHandler;

            await _hubConnection.DisposeAsync();
            Logger.LogInformation("Disposed ...");
        }
    }

}
