<!--
// Copyright (c) 2021 Hugh Maaskant
// MIT License
-->

@inject NavigationManager NavigationManager

@using Microsoft.AspNetCore.SignalR.Client
@using Serilog
@using IoTAS.Shared.DevicesStatusStore
@using IoTAS.Shared.Hubs
@implements IAsyncDisposable

<Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
    <Found Context="routeData">
        <CascadingValue Name="CascadingConnectionStatusText" Value="@_connectionStatusText">
            <CascadingValue Name="CascadingDeviceStatusList" Value="@_deviceStatusList">
                <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            </CascadingValue>
        </CascadingValue>
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <p>Sorry, there is nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {

    private bool _isDisposed;

    private HubConnection _hubConnection;

    private Uri _hubPath;

    private IDeviceStatusStore _store;

    private IEnumerable<DeviceReportingStatus> _deviceStatusList;

    private string _connectionStatusText = string.Empty;

    readonly ILogger _logger = Log.ForContext<App>();

    protected override void OnInitialized()
    {
        Log.Information("App initialized ...");

        // To early to call StateHasChanged, so just simple assignments
        _store = new VolatileDeviceStatusStore();
        _deviceStatusList = _store.GetDevicesStatusList();
        _connectionStatusText = "Initializing";

        _hubPath = NavigationManager.ToAbsoluteUri(IMonitorHubServer.Path);

        _logger.Information(
            nameof(OnInitialized) + " - " +
            $"Using MonitorHub at {_hubPath}");

        // Create and configure a HubConnection, but do not yet start it to avoid making
        // the user wait. Delay start to after the FirstRender.
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_hubPath)
            .Build();

        // Register the IMonitorHub RPC methods
        _hubConnection.On<SrvToMonDeviceHeartbeatDto>(
            nameof(IMonitorHub.ReceiveDeviceHeartbeatUpdate), ReceiveDeviceHeartbeatUpdate);
        _hubConnection.On<SrvToMonDeviceStatusDto>(
            nameof(IMonitorHub.ReceiveDeviceStatusUpdate), ReceiveDeviceStatusUpdate);
        _hubConnection.On<SrvToMonDeviceStatusDto[]>(
            nameof(IMonitorHub.ReceiveDeviceStatusesSnapshot), ReceiveDeviceStatusesSnapshot);

        _logger.Information(
            nameof(OnInitialized) + " - " +
            "Remote Procedure Call implementations have been registered on the HubConnection");

        // Register the connection life-cycle callback handlers
        _hubConnection.Closed += ConnectionClosedHandler;
        _hubConnection.Reconnecting += ConnectionReconnectingHandler;
        _hubConnection.Reconnected += ConnectionReconnectedHandler;

        _logger.Information(
            nameof(OnInitialized) + " - " +
            "HubConnection Life-cycle callbacks have been registered on the HubConnection");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            bool operational = await StartConnectionAndRegisterAsync();

            if (!operational)
            {
                // We should never come here, but as a defense-in-depth measure it's fine imho
                _connectionStatusText = $"Failed to connect to and register on Hub at {_hubPath}";
                StateHasChanged();

                _logger.Fatal(
                    nameof(OnAfterRenderAsync) + " - " +
                    _connectionStatusText);
            }
        }
    }

    private async Task<bool> StartConnectionAndRegisterAsync()
    {
        Random random = null;
        int delayIncrease = 0;

        bool started = false;
        bool registered = false;

        // Any information we had is now stale --> remove it
        _store.Clear();
        SetStatusList();

        // Keep trying to until we can start and register or the browser tab is closed by the user
        while (!registered)
        {
            if (!started)
            {
                started = await TryToStartConnectionAsync();
            }

            if (started)
            {
                registered = await TryToRegisterMonitoreAsync();
            }

            if (!registered)
            {
                // Either Start or Registration failed, backoff and try again ...
                random ??= new Random();
                int delay = random.Next(2500, 5000) + delayIncrease;
                if (delayIncrease <= 20000) delayIncrease += 5000;

                _logger.Information(
                    nameof(StartConnectionAndRegisterAsync) + " - " +
                    $"Backing of for {delay} msec");

                await Task.Delay(delay);
            }
        }

        return true;
    }

    private async Task<bool> TryToStartConnectionAsync()
    {
        string message;

        try
        {
            message = $"Trying to connect to Hub at {_hubPath}...";
            SetStatusText(message);
            _logger.Information(
                nameof(TryToStartConnectionAsync) + " - " +
                message);

            await _hubConnection.StartAsync();

            message = $"Connected to Hub at {_hubPath}";
            SetStatusText(message);
            _logger.Information(
                nameof(TryToStartConnectionAsync) + " - " +
                message);

            return true;
        }
        catch (Exception e)
        {
            SetStatusText($"Error while connecting to Hub: {e.Message} - retrying soon");
            _logger.Warning(
                e,
                nameof(TryToStartConnectionAsync) + " - " +
                "Error while connecting to Hub");
        }

        return false;
    }

    private async Task<bool> TryToRegisterMonitoreAsync()
    {
        // currently empty --> default record returned
        MonToSrvRegistrationDto registrationDto = new();

        try
        {
            await _hubConnection.SendAsync(nameof(IMonitorHubServer.RegisterMonitorClient), registrationDto);

            _logger.Information(
                nameof(TryToRegisterMonitoreAsync) + " - " +
                "Monitor has been registered at the Server with {ConnectionId}",
                _hubConnection.ConnectionId);

            return true;
        }

        catch (Exception e)
        {
            _logger.Warning(
                e,
                nameof(TryToRegisterMonitoreAsync) + " - " +
                "Error while registering Monitor with the Hub");
        }

        return false;
    }

    private async Task ConnectionClosedHandler(Exception e)
    {
        string message;

        // cannot show old data
        _store.Clear();
        SetStatusList();

        if (e is null)
        {
            message = $"Connection to Hub at {_hubPath} closed by Server";
            SetStatusText(message);
            _logger.Warning(
                nameof(ConnectionClosedHandler) + " - " +
                message);

            // We are in an interactive environment, respect the Server
            // and do not try to reconnect (as is done on failures).
            return;
        }

        SetStatusText($"Error {e.Message} on Connection to Hub at {_hubPath}");
        _logger.Warning(
            e,
            nameof(ConnectionClosedHandler) + " - " +
            "Connection to Server has been lost");

        _ = await StartConnectionAndRegisterAsync();
    }

    private Task ConnectionReconnectedHandler(string connectionId)
    {
        string message = "Connection reconnected";
        SetStatusText(message);
        _logger.Information(
            nameof(ConnectionReconnectedHandler) + " - " +
            message);

        return Task.CompletedTask;
    }

    private Task ConnectionReconnectingHandler(Exception ex)
    {
        string message = "Connection reconnecting ...";
        SetStatusText(message);
        _logger.Information(
            nameof(ConnectionReconnectingHandler) + " - " +
            message);

        return Task.CompletedTask;
    }


    // Called remotely through SignalR by Server to notify Monitors it received a Device Registration
    private Task ReceiveDeviceStatusUpdate(SrvToMonDeviceStatusDto statusDto)
    {
        _logger.Information(
            nameof(ReceiveDeviceStatusUpdate) + " - " +
            "Received: {StatusDto}",
            statusDto);

        _store.SetDeviceStatus(DeviceReportingStatus.FromStatusDto(statusDto));
        SetStatusList();

        return Task.CompletedTask;
    }

    // Called remotely through SignalR by Server to notify Monitors it received a Device Heartbeat
    private Task ReceiveDeviceHeartbeatUpdate(SrvToMonDeviceHeartbeatDto hearbeatDto)
    {
        _logger.Debug(
             nameof(ReceiveDeviceHeartbeatUpdate) + " - " +
             "Received {HeartBeatDto}",
             hearbeatDto);

        _ = _store.UpdateHeartbeat(hearbeatDto.DeviceId, hearbeatDto.ReceivedAt);
        SetStatusList();

        return Task.CompletedTask;
    }

    // Called remotely through SignalR by Server to send multiple Device statuses to a Monitor
    // upon a received Monitor Registration from that Monitor
    private Task ReceiveDeviceStatusesSnapshot(SrvToMonDeviceStatusDto[] statusListDto)
    {
        _logger.Information(
            nameof(ReceiveDeviceStatusesSnapshot) + " - " +
            $"Received {statusListDto.Count()} Devices in List");

        foreach (var statusDto in statusListDto)
        {
            _store.SetDeviceStatus(DeviceReportingStatus.FromStatusDto(statusDto));
        }
        SetStatusList();

        return Task.CompletedTask;
    }

    // Sync the CascadingDeviceStatusList with the _store and signal StateHasChanged
    private void SetStatusList()
    {
        _deviceStatusList = _store.GetDevicesStatusList().OrderBy(status => status.DeviceId);
        StateHasChanged();
    }

    // Update the CascadingConnectionStatusText and signal StateHasChanged
    private void SetStatusText(string message)
    {
        _connectionStatusText = message;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            _hubConnection.Closed -= ConnectionClosedHandler;
            _hubConnection.Reconnected -= ConnectionReconnectedHandler;
            _hubConnection.Reconnecting -= ConnectionReconnectingHandler;

            _hubConnection.Remove(nameof(IMonitorHub.ReceiveDeviceHeartbeatUpdate));
            _hubConnection.Remove(nameof(IMonitorHub.ReceiveDeviceStatusUpdate));
            _hubConnection.Remove(nameof(IMonitorHub.ReceiveDeviceStatusesSnapshot));

            if (_isDisposed)
            {
                _logger.Warning(
                    nameof(DisposeAsync) + " - " +
                    "Already disposed ...");
            }
            else
            {
                await _hubConnection.DisposeAsync();
                _isDisposed = true;

                _logger.Warning(
                    nameof(DisposeAsync) + " - " +
                    "Disposed ...");
            }
        }
    }
}
