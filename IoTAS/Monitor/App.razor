@using System.Threading.Tasks;

@using Microsoft.AspNetCore.SignalR.Client;
@using Microsoft.Extensions.Logging;
@using Microsoft.Extensions.Logging.Abstractions;

@using IoTAS.Shared.DevicesStatusStore;
@using IoTAS.Shared.Hubs;

@inject NavigationManager NavigationManager
@inject ILogger<App> Logger
@inject ILogger<VolatileDeviceStatusStore> StoreLogger

@implements IAsyncDisposable

<Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true">
    <Found Context="routeData">
        <CascadingValue Name="CascadingConnectionStatusText" Value="@_connectionStatusText">
            <CascadingValue Name="CascadingDeviceStatusList" Value="@_deviceStatusList">
                <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            </CascadingValue>
        </CascadingValue>
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <p>Sorry, there is nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {

    private bool _isDisposed;

    private HubConnection _hubConnection;

    private Uri _hubPath;

    private IDeviceStatusStore _store;

    private IEnumerable<DeviceReportingStatus> _deviceStatusList;

    private string _connectionStatusText = string.Empty;

    protected override void OnInitialized()
    {
        if (Logger is null) Logger = NullLogger<App>.Instance;

        Logger.LogInformation("App initialized ...");

        // To early to call StateHasChanged, so just simple assignments
        _store = new VolatileDeviceStatusStore(StoreLogger);
        _deviceStatusList = _store.GetDevicesStatusList();
        _connectionStatusText = "Initialising";

        _hubPath = NavigationManager.ToAbsoluteUri(IMonitorHubServer.path);

        Logger.LogInformation(
            nameof(OnInitialized) + " - " +
            $"Using MonitorHub at {_hubPath}");

        // Create and configure a HubConnection, but do not yet start it to avoid making
        // the user wait. Delay start to after the FirstRender.
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_hubPath)
            .Build();

        // Register the IMonitorHub RPC methods
        _hubConnection.On<SrvToMonDeviceHeartbeatDto>(
            nameof(IMonitorHub.ReceiveDeviceHeartbeatUpdate), ReceiveDeviceHeartbeatUpdate);
        _hubConnection.On<SrvToMonDeviceStatusDto>(
            nameof(IMonitorHub.ReceiveDeviceStatusUpdate), ReceiveDeviceStatusUpdate);
        _hubConnection.On<SrvToMonDeviceStatusDto[]>(
            nameof(IMonitorHub.ReceiveDeviceStatusesSnapshot), ReceiveDeviceStatusesSnapshot);

        Logger.LogInformation(
            nameof(OnInitialized) + " - " +
            "Remote Procedure Call implementations have been registered on the HubConnection");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ConnectWithRetryAsync();

            if (_hubConnection.State == HubConnectionState.Connected)
            {
                _hubConnection.Closed += ConnectionClosedHandler;
                _hubConnection.Reconnecting += ConnectionReconnectingHandler;
                _hubConnection.Reconnected += ConnectionReconnectedHandler;

                Logger.LogInformation(
                    nameof(OnAfterRenderAsync) + " - " +
                    "HubConnection Life-cycle callbacks have been registered on the HubConnection");
            }
            else
            {
                // We should never come here, but as a defense-in-depth measure it's fine imho
                _connectionStatusText = $"Failed to connect to Hub at {_hubPath.ToString()}";
                StateHasChanged();

                Logger.LogCritical(
                    nameof(OnAfterRenderAsync) + " - " +
                    _connectionStatusText);
            };
        }
    }

    /// <summary>
    /// (Re-)Starts the HubConnection untill succesfull, using increasing backoff delays upon Start failures
    /// </summary>
    private async Task ConnectWithRetryAsync()
    {
        Random random = null;
        int delayIncrease = 0;

        // Keep trying to until we can start or the browser tab is closed by the user
        while (_hubConnection.State != HubConnectionState.Connected)
        {
            string message;

            try
            {
                message = $"Trying to connect to Hub at {_hubPath.ToString()}...";
                SetStatusText(message);
                Logger.LogInformation(
                    nameof(ConnectWithRetryAsync) + " - " +
                    message);

                await _hubConnection.StartAsync();

                message = $"Connected to Hub at {_hubPath.ToString()}";
                SetStatusText(message);
                Logger.LogInformation(
                    nameof(ConnectWithRetryAsync) + " - " +
                    message);

                await RegisterMonitorCient();
            }
            catch (Exception e)
            {
                _store.Clear();
                SetStatusList();
                SetStatusText($"Error while connecting to Hub: {e.Message} - retrying soon");

                random ??= new Random();
                int delay = random.Next(2500, 5000) + delayIncrease;
                if (delayIncrease <= 25000) delayIncrease += 2500;

                Logger.LogWarning(
                    e,
                    nameof(ConnectWithRetryAsync) + " - " +
                    $"Error while connecting to Hub; retrying in {delay} msec");

                await Task.Delay(delay);
            }
        }
    }

    private async Task RegisterMonitorCient()
    {
        MonToSrvRegistrationDto registrationDto = new(); // currently empty --> default record returned
        await _hubConnection.SendAsync(nameof(IMonitorHubServer.RegisterMonitorClient), registrationDto);

        Logger.LogInformation(
            nameof(RegisterMonitorCient) + " - " +
            "Monitor has been registered at the Server with {ConnectionId}",
            _hubConnection.ConnectionId);
    }

    private Task ConnectionClosedHandler(Exception e)
    {
        string message;

        // cannot show old data
        _store.Clear();
        SetStatusList();

        if (e is null)
        {
            message = $"Connection to Hub at {_hubPath.ToString()} closed by Server";
            SetStatusText(message);
            Logger.LogWarning(
                nameof(ConnectionClosedHandler) + " - " +
                message);

            return Task.CompletedTask;
        }

        SetStatusText($"Error {e.Message} on Connection to Hub at {_hubPath.ToString()}");
        Logger.LogWarning(
            e,
            nameof(ConnectionClosedHandler) + " - " +
            "Connection to Server has been lost");

        return ConnectWithRetryAsync();
    }

    private Task ConnectionReconnectedHandler(string connectionId)
    {
        string message = "Connection reconnected";
        SetStatusText(message);
        Logger.LogInformation(
            nameof(ConnectionReconnectedHandler) + " - " +
            message);

        return Task.CompletedTask;
    }

    private Task ConnectionReconnectingHandler(Exception ex)
    {
        string message = "Connection reconnecting ...";
        SetStatusText(message);
        Logger.LogInformation(
            nameof(ConnectionReconnectingHandler) + " - " +
            message);

        return Task.CompletedTask;
    }


    // Called remotely through SignalR by Server to notify Monitors it received a Device Registration
    private Task ReceiveDeviceStatusUpdate(SrvToMonDeviceStatusDto statusDto)
    {
        Logger.LogInformation(
            nameof(ReceiveDeviceStatusUpdate) + " - " +
            "Received: {StatusDto}",
            statusDto);

        _store.SetDeviceStatus(DeviceReportingStatus.FromStatusDto(statusDto));
        SetStatusList();

        return Task.CompletedTask;
    }

    // Called remotely through SignalR by Server to notify Monitors it received a Device Heartbeat
    private Task ReceiveDeviceHeartbeatUpdate(SrvToMonDeviceHeartbeatDto hearbeatDto)
    {
        Logger.LogDebug(
             nameof(ReceiveDeviceHeartbeatUpdate) + " - " +
             "Received {HeartBeatDto}",
             hearbeatDto);

        _ = _store.UpdateHeartbeat(hearbeatDto.DeviceId, hearbeatDto.ReceivedAt);
        SetStatusList();

        return Task.CompletedTask;
    }

    // Called remotely through SignalR by Server to send multiple Device statuses to a Monitor
    // upon a received Monitor Registration from that Monitor
    private Task ReceiveDeviceStatusesSnapshot(SrvToMonDeviceStatusDto[] statusListDto)
    {
        Logger.LogInformation(
            nameof(ReceiveDeviceStatusesSnapshot) + " - " +
            $"Received {statusListDto.Count()} Devices in List");

        foreach (var statusDto in statusListDto)
        {
            _store.SetDeviceStatus(DeviceReportingStatus.FromStatusDto(statusDto));
        }
        SetStatusList();

        return Task.CompletedTask;
    }

    // Sync the CascadingDeviceStatusList with the _store and signal StateHasChanged
    private void SetStatusList()
    {
        _deviceStatusList = _store.GetDevicesStatusList().OrderBy(status => status.DeviceId);
        StateHasChanged();
    }

    // Update the CascadingConnectionStatusText and signal StateHasChanged
    private void SetStatusText(string message)
    {
        _connectionStatusText = message;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            _hubConnection.Closed -= ConnectionClosedHandler;
            _hubConnection.Reconnected -= ConnectionReconnectedHandler;
            _hubConnection.Reconnecting -= ConnectionReconnectingHandler;

            _hubConnection.Remove(nameof(IMonitorHub.ReceiveDeviceHeartbeatUpdate));
            _hubConnection.Remove(nameof(IMonitorHub.ReceiveDeviceStatusUpdate));
            _hubConnection.Remove(nameof(IMonitorHub.ReceiveDeviceStatusesSnapshot));

            if (_isDisposed)
            {
                Logger.LogWarning(
                    nameof(DisposeAsync) + " - " +
                    "Already disposed ...");
            }
            else
            {
                await _hubConnection.DisposeAsync();
                _isDisposed = true;

                Logger.LogWarning(
                    nameof(DisposeAsync) + " - " +
                    "Disposed ...");
            }
        }
    }
}
