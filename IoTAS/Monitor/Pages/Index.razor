@page "/"
@using Microsoft.AspNetCore.SignalR.Client

@using IoTAS.Shared.DevicesStatusStore
@using IoTAS.Shared.Hubs

@using Microsoft.Extensions.Logging;
@inject ILoggerFactory LoggerFactory
@inject ILogger<Index> logger;


@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<h3>Device Monitor</h3>

<p>
    Link status: @(IsConnected ? $"up - connectionId = {ConnectionId}" : "down")
</p>

<h3>StatusStore</h3>
@if (_store is null)
{
    <p>The store is empty</p>
}
else
{

    <ul id="StatusStore">
        @foreach (var deviceStatus in _store.GetDeviceStatuses())
        {
            <li>@deviceStatus.ToString()</li>
        }
    </ul>
}

<h3>MessahgeList</h3>
<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }

</ul>



@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private Uri monitorHubUrl;

    private IDeviceStatusStore _store;

    protected override async Task OnInitializedAsync()
    {
        var _storeLogger = LoggerFactory.CreateLogger<VolatileDeviceStatusStore>();
        _store = new VolatileDeviceStatusStore(_storeLogger);

        monitorHubUrl = NavigationManager.ToAbsoluteUri(IMonitorHubServer.path);
        hubConnection = new HubConnectionBuilder()
            .WithUrl(monitorHubUrl)
            .Build();

        // Register the Hub callback methods
        hubConnection.On<SrvToMonDeviceHeartbeatDto>(nameof(IMonitorHub.ReceiveDeviceHeartbeatUpdate), (hearbeatDto) =>
        {
            _ = _store.UpdateHeartbeat(hearbeatDto.DeviceId, hearbeatDto.ReceivedAt);
            messages.Add(hearbeatDto.ToString());
            StateHasChanged();
        });

        hubConnection.On<SrvToMonDeviceStatusDto>(nameof(IMonitorHub.ReceiveDeviceStatusUpdate), (statusDto) =>
        {
            _store.SetDeviceStatus(DeviceReportingStatus.FromStatusDto(statusDto));
            messages.Add(statusDto.ToString());
            StateHasChanged();
        });

        hubConnection.On<SrvToMonDeviceStatusDto[]>(nameof(IMonitorHub.ReceiveDeviceStatusesSnapshot), (statusListDto) =>
        {
            foreach (var statusDto in statusListDto)
            {
                _store.SetDeviceStatus(DeviceReportingStatus.FromStatusDto(statusDto));
                messages.Add(statusDto.ToString());
            }
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        if (IsConnected)
        {
            MonToSrvRegistrationDto registrationDto = new(); // currently empty --> default record returned
            await hubConnection.SendAsync(nameof(IMonitorHubServer.RegisterMonitorClient), registrationDto);
            Console.WriteLine($"Monitor has been registered with the Server, connection = {hubConnection.ConnectionId}");
        }
    }

    private bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    private string ConnectionId => hubConnection.ConnectionId;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}