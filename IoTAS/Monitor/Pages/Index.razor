@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using IoTAS.Shared.Hubs
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<h3>Device Monitor</h3>

<p>
    Link status: @(IsConnected ? "up" : "down")
</p>
<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>


@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private Uri monitorHubUrl;

    protected override async Task OnInitializedAsync()
    {
        monitorHubUrl = NavigationManager.ToAbsoluteUri(IMonitorHubServer.path);

        hubConnection = new HubConnectionBuilder()
            .WithUrl(monitorHubUrl)
            .Build();

        // Register the Hub callback methods
        hubConnection.On<SrvToMonDeviceHeartbeatArgs>("DeviceHeartBeatUpdate", (hearbeatArgs) =>
        {
            messages.Add(hearbeatArgs.ToString());
            StateHasChanged();
        });

        hubConnection.On<SrvToMonDeviceStatusArgs>("DeviceStatusReport", (statusArgs) =>
        {
            messages.Add(statusArgs.ToString());
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        if (IsConnected)
        {
            MonToSrvRegistrationArgs registrationArgs = new();
            await hubConnection.SendAsync(nameof(IMonitorHubServer.RegisterMonitorAsync), registrationArgs);
            Console.WriteLine($"Monitor has been registered with the Server, connection = {hubConnection.ConnectionId}");
        }
    }

    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}