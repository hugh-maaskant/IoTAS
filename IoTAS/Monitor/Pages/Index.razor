<!--
// Copyright (c) 2021 Hugh Maaskant
// MIT License
-->

@page "/"

@using System.Threading;

@using IoTAS.Shared.DevicesStatusStore
@using Serilog

@implements IAsyncDisposable
<div class="clock">@updatedAt.ToString(dateTimeFormat)</div>

<div class="header">Device Status List</div>

@if (DeviceStatusList is null || DeviceStatusList.Count() == 0)
{
    <p>Currently there are no Devices to show ...</p>
}
else
{
    string cssColor;

    ontimeCount = 0;
    lateCount = 0;
    overdueCount = 0;

    <table>
        <thead>
            <tr>
                <th>DeviceId</th>
                <th>First Registered</th>
                <th>Last Registered</th>
                <th>Last Seen</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var deviceStatus in DeviceStatusList)
            {
                TimeSpan howLongAgo = updatedAt - deviceStatus.LastSeenAt;
                int secondsAgo = (int)Math.Round(howLongAgo.TotalSeconds);
                switch (secondsAgo)
                {
                    case <= 15:
                        cssColor = "ontime";
                        ontimeCount++;
                        break;

                    case <= 30:
                        cssColor = "late";
                        lateCount++;
                        break;

                    default:
                        cssColor = "overdue";
                        overdueCount++;
                        break;
                }
                <tr>
                    <td style="text-align:right;">@deviceStatus.DeviceId</td>
                    <td>@deviceStatus.FirstRegisteredAt.ToString(dateTimeFormat)</td>
                    <td>@deviceStatus.LastRegisteredAt.ToString(dateTimeFormat)</td>
                    <td class=@cssColor>@deviceStatus.LastSeenAt.ToString(dateTimeFormat)</td>
                </tr>
            }
        </tbody>
    </table>

    <p class="summary">
        @if (ontimeCount > 0)
        {<span>On time: <span class="ontime">@ontimeCount</span>; </span>}
        @if (lateCount > 0)
        {<span>Late: <span class="late">@lateCount</span>; </span>}
        @if (overdueCount > 0)
        {<span>Overdue: <span class="overdue">@overdueCount</span>;</span>}
    </p>
}

@code {

    private static readonly string dateTimeFormat = "yyyy-MM-dd  HH:mm:ss";

    private Timer timer;

    private DateTime updatedAt;

    private int ontimeCount;
    private int lateCount = 0;
    private int overdueCount = 0;

    [CascadingParameter(Name = "CascadingDeviceStatusList")]
    public IEnumerable<DeviceReportingStatus> DeviceStatusList { get; set; }

    protected override void OnInitialized()
    {
        updatedAt = DateTime.Now;

        timer = new Timer(async _ =>
        {
            updatedAt = DateTime.Now;
            await InvokeAsync(StateHasChanged);
        }, null, 1000, 1000);

        Log.Information($"{nameof(Index)} initialized ...");
    }

    public async ValueTask DisposeAsync()
    {
        if (timer is not null)
        {
            await timer.DisposeAsync();
        }
    }
}