@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using IoTAS.Shared.Hubs
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<h3>Device Monitor</h3>

<p>
    Link status: @(IsConnected ? $"up - connectionId = {ConnectionId}" : "down")
</p>
<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>


@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private Uri monitorHubUrl;

    protected override async Task OnInitializedAsync()
    {
        monitorHubUrl = NavigationManager.ToAbsoluteUri(IMonitorHubServer.path);

        hubConnection = new HubConnectionBuilder()
            .WithUrl(monitorHubUrl)
            .Build();

        // Register the Hub callback methods
        hubConnection.On<SrvToMonDeviceHeartbeatDto>(nameof(IMonitorHub.ReceiveDeviceHeartbeatUpdate), (hearbeatDto) =>
        {
            messages.Add(hearbeatDto.ToString());
            StateHasChanged();
        });

        hubConnection.On<SrvToMonDeviceStatusDto>(nameof(IMonitorHub.ReceiveDeviceStatusUpdate), (statusDto) =>
        {
            messages.Add(statusDto.ToString());
            StateHasChanged();
        });

        hubConnection.On<SrvToMonDeviceStatusDto[]>(nameof(IMonitorHub.ReceiveDeviceStatusesSnapshot), (statusListDto) =>
        {
            messages.Add($"Received list of {statusListDto.Length} statusDtos");
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        if (IsConnected)
        {
            MonToSrvRegistrationDto registrationDto = new(); // currently empty --> default record returned
            await hubConnection.SendAsync(nameof(IMonitorHubServer.RegisterMonitorClient), registrationDto);
            Console.WriteLine($"Monitor has been registered with the Server, connection = {hubConnection.ConnectionId}");
        }
    }

    private bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    private string ConnectionId => hubConnection.ConnectionId;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}